121. Best Time to Buy and Sell Stock
Question :-https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/

You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 104







**Code**
Approach 1 : Bruit Force (By using nested for loop) This will pass the 199 Testcase out off 212 

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int ans=0;
        for(int i=0;i<prices.size();i++){
            for(int j=i;j<prices.size();j++){
                if(prices[j]-prices[i]>ans){
                    ans=prices[j]-prices[i];
                }
            }
        }
        return ans;
    }
};
TC=O(n^2)

Approach 2 :  Optimal Solution (by using sliding window approach)

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int ans=INT_MIN,i=0,j=0,n=prices.size();
        while(j<n){
            if(prices[j]-prices[i]<0){
                i++;
            }
            else{
                ans=max(ans,prices[j]-prices[i]);
                j++;
            }
        }
        return ans;
    }
};

TC:-O(n)



